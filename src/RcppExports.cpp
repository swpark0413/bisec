// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// innerprod
arma::mat innerprod(const arma::mat A, const arma::mat B);
RcppExport SEXP _bisec_innerprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(innerprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// arma_matmul
arma::mat arma_matmul(const arma::mat A, const arma::mat B);
RcppExport SEXP _bisec_arma_matmul(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_matmul(A, B));
    return rcpp_result_gen;
END_RCPP
}
// splitList1
List splitList1(const List L);
RcppExport SEXP _bisec_splitList1(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(splitList1(L));
    return rcpp_result_gen;
END_RCPP
}
// splitList2
List splitList2(const List L);
RcppExport SEXP _bisec_splitList2(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(splitList2(L));
    return rcpp_result_gen;
END_RCPP
}
// splitList3
List splitList3(const List L);
RcppExport SEXP _bisec_splitList3(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(splitList3(L));
    return rcpp_result_gen;
END_RCPP
}
// Eigen_eig
List Eigen_eig(const Eigen::MatrixXd A);
RcppExport SEXP _bisec_Eigen_eig(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Eigen_eig(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bisec_innerprod", (DL_FUNC) &_bisec_innerprod, 2},
    {"_bisec_arma_matmul", (DL_FUNC) &_bisec_arma_matmul, 2},
    {"_bisec_splitList1", (DL_FUNC) &_bisec_splitList1, 1},
    {"_bisec_splitList2", (DL_FUNC) &_bisec_splitList2, 1},
    {"_bisec_splitList3", (DL_FUNC) &_bisec_splitList3, 1},
    {"_bisec_Eigen_eig", (DL_FUNC) &_bisec_Eigen_eig, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bisec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
